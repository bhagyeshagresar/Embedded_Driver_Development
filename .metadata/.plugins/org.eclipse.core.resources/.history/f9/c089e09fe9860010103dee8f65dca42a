/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#define RCC_BASE_ADDR		0x40023800UL
#define RCC_CR_REG_OFFSET	0x00UL
#define RCC_CFGR_REG_OFFSET	0x08UL

#define RCC_CR_REG_ADDR		(RCC_BASE_ADDR + RCC_CR_REG_OFFSET);
#define	RCC_CFGR_REG_ADDR	(RCC_BASE_ADDR + RCC_CFGR_REG_OFFSET);


int main(void)
{
	uint32_t *pRccCrReg 	= (uint32_t*)RCC_CR_REG_ADDR;
	uint32_t *pRccCfgrReg	= (uint32_t*)RCC_CFGR_REG_ADDR;

	//1. Enable HSE clock using HSEON bit (RCC_CR)
	*pRccCrReg |= (1 << 16);

	//2. wait until the HSE clock from the external crystal stablizes
	while(!(*pRccCrReg & (1 << 17))){

	}

	//3. Switch the system clock to HSE(RCC_CFGR)
	*pRccCfgrReg |= (1 << 0);

	//4. Do the MCO1 settings to measure it

	//4a. Configure the RCC_CFGR MCO1 bit fields to select HSE as clock source
	*pRccCfgrReg &= ~(0x3 << 21) //clear first
	*pRccCfgrReg |= (1 << 22); //Clear bit positions 21 and SET 22

	//4b. Configure MCO1 prescaler- divide by 4 to get 4MHZ frequency as the logic analyser cannot practically sample signals at 16MHZ
	*pRccCfgrReg |= ( 1 << 25);
	*pRccCfgrReg |= ( 1 << 26);

	//4c. Enable the peripheral clock for GPIOA peripheral
	uint32_t *pRccAhb1Enr = (uint32_t*)(RCC_BASE_ADDR + 0x30);
	*pRccAhb1Enr |= (1 << 0); //Enable GPIOA peripheral clock

	//Configure mode of GPIOA pin 8 as alternate function mode
	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + 00);
	*pGPIOAModeReg &= ~( 0x3 << 16); //clear
	*pGPIOAModeReg |= ( 0x2 << 16);  //set

	//2c. Configure the alternation function register to set the mode 0 for PA8
	uint32_t *pGPIOAAltFunHighReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x24);
	*pGPIOAAltFunHighReg &= ~( 0xf << 0);



    /* Loop forever */
	for(;;);
}
